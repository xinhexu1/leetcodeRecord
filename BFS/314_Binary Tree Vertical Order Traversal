// Given the root of a binary tree, return the vertical order traversal of its nodes' values. (i.e., from top to bottom, column by column).

// If two nodes are in the same row and column, the order should be from left to right.

// Input: root = [3,9,20,null,null,15,7]
// Output: [[9],[3,15],[20],[7]]

// Input: root = [3,9,8,4,0,1,7]
// Output: [[4],[9],[3,0,1],[8],[7]]

// Input: root = [3,9,8,4,0,1,7,null,null,null,2,5]
// Output: [[4],[9,5],[3,0,1],[8,2],[7]]


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
  public List<List<Integer>> verticalOrder(TreeNode root) {
      List<List<Integer>> res = new ArrayList<>();
  if (root == null) {
      return res;
  }
  
  Map<Integer, ArrayList<Integer>> map = new HashMap<>();
  // 存储node
  Queue<TreeNode> q = new LinkedList<>();
  // 存储序列
  Queue<Integer> cols = new LinkedList<>();
  // 存放全部tree node，先放下第一个
  q.add(root); 
  // 一个序列号，第一个是0
  cols.add(0);
  //  min 和max是之后为了让结果可以按照顺序一层一层append进去
  int min = 0;
  int max = 0;
  
  while (!q.isEmpty()) {
      // 取一个节点
      TreeNode node = q.poll();
      // 取一个col
      int col = cols.poll();
      // 判断col是否存在在map中
      if (!map.containsKey(col)) {
          // 把这个新的key（col）和一个新的value append进map
          map.put(col, new ArrayList<Integer>());
      }
      // 给新的col添加node val
      map.get(col).add(node.val);
      // 如果左边子树不是null那就往左面移动 col - 1，更新 min的值
      if (node.left != null) {
          q.add(node.left); 
          cols.add(col - 1);
          min = Math.min(min, col - 1);
      }
      // 如果右边子树不是null那就往左面移动 col + 1，更新 max的值
      if (node.right != null) {
          q.add(node.right);
          cols.add(col + 1);
          max = Math.max(max, col + 1);
      }
  }
  // 最后把value append到最后的结果里去
  for (int i = min; i <= max; i++) {
      res.add(map.get(i));
  }

  return res;        
  }
}